let e=null,t=!1;const a={initialized:!1,busy:!1,lastJobId:null};async function s(){try{if(await async function(){try{try{return importScripts("/liblouis/build-no-tables-utf16.js"),importScripts("/liblouis/easy-api.js"),!0}catch(e){try{return importScripts("/static/liblouis/build-no-tables-utf16.js"),importScripts("/static/liblouis/easy-api.js"),!0}catch(t){throw new Error(`Could not load liblouis scripts: ${e.message}`)}}}catch(e){throw e}}(),await new Promise(e=>setTimeout(e,200)),"undefined"!=typeof liblouisBuild&&"undefined"!=typeof LiblouisEasyApi){if(e=new LiblouisEasyApi(liblouisBuild),e.enableOnDemandTableLoading)try{e.enableOnDemandTableLoading("/liblouis/tables/")}catch(s){try{e.enableOnDemandTableLoading("/static/liblouis/tables/")}catch(i){}}return t=!0,a.initialized=!0,!0}throw new Error("Liblouis libraries not available after loading")}catch(n){throw n}}self.addEventListener("message",async i=>{const{type:n,data:l,id:o,text:r,table:c}=i.data;try{switch(n){case"INIT":await async function(t){try{a.initialized||await s(),self.postMessage({type:"READY",id:t,capabilities:{translation:!0,tables:e?["en-us-g1.ctb","en-us-g2.ctb"]:[],onDemandLoading:!!e?.enableOnDemandTableLoading}})}catch(i){throw new Error(`Liblouis initialization failed: ${i.message}`)}}(o);break;case"TRANSLATE":await async function(s,i){if(!t||!e)throw new Error("Liblouis not ready. Call INIT first.");const{text:n,table:l="en-us-g1.ctb",options:o={}}=s;a.busy=!0,a.lastJobId=i;try{self.postMessage({type:"PROGRESS",id:i,progress:50,message:"Translating text to braille..."});const t=e.translateString(l,n);self.postMessage({type:"TRANSLATION_COMPLETE",id:i,result:{brailleText:t,originalText:n,table:l,stats:{originalLength:n.length,brailleLength:t.length,processingTime:Date.now()-Date.now()}}})}finally{a.busy=!1,a.lastJobId=null}}(l,o);break;case"GET_STATUS":!function(s){self.postMessage({type:"STATUS",id:s,status:{...a,liblouisReady:t,availableTables:e?["en-us-g1.ctb","en-us-g2.ctb"]:[],memoryUsage:performance.memory?{used:performance.memory.usedJSHeapSize,total:performance.memory.totalJSHeapSize,limit:performance.memory.jsHeapSizeLimit}:null}})}(o);break;default:if(void 0===r)throw new Error(`Unknown message type: ${n}`);await async function(a,i,n){t&&e||await s();try{const t=e.translateString(i,a);self.postMessage({result:t,id:n})}catch(l){self.postMessage({error:l.message,id:n})}}(r,c||"en-us-g1.ctb",o)}}catch(b){self.postMessage({type:"ERROR",id:o,error:{message:b.message,stack:b.stack,name:b.name}})}}),self.addEventListener("error",e=>{self.postMessage({type:"ERROR",error:{message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno}})}),self.addEventListener("unhandledrejection",e=>{self.postMessage({type:"ERROR",error:{message:e.reason.message||"Unhandled promise rejection",stack:e.reason.stack}})});
