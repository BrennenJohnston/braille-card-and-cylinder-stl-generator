!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();class e{constructor(){this.workers=new Map,this.activeJobs=new Map,this.jobCounter=0}async getWorker(e){if(!this.workers.has(e)){let s;try{if("geometry"===e)s=new Worker(new URL("/workers/geometry-worker.js",import.meta.url),{type:"module"});else{if("liblouis"!==e)throw new Error(`Unknown worker type: ${e}`);s=new Worker("/liblouis-worker.js")}await this.initializeWorker(s,e),this.workers.set(e,s)}catch(t){throw new Error(`Failed to create ${e} worker: ${t.message}`)}}return this.workers.get(e)}async initializeWorker(e,t){return new Promise((s,n)=>{const i=setTimeout(()=>{n(new Error(`${t} worker initialization timeout (10s)`))},1e4),r=a=>{"READY"===a.data.type?(clearTimeout(i),e.removeEventListener("message",r),s(a.data.capabilities||{})):"ERROR"===a.data.type&&(clearTimeout(i),e.removeEventListener("message",r),n(new Error(`${t} worker initialization error: ${a.data.error.message}`)))},a=s=>{clearTimeout(i),e.removeEventListener("message",r),e.removeEventListener("error",a),n(new Error(`${t} worker error: ${s.message}`))};e.addEventListener("message",r),e.addEventListener("error",a),e.postMessage({type:"INIT",id:this.generateJobId()})})}async generateSTL(e,t,s={},n=null){const i=await this.getWorker("geometry"),r=this.generateJobId();return new Promise((a,o)=>{const l={resolve:a,reject:o,onProgress:n,type:"generation",shapeType:e,startTime:Date.now()};this.activeJobs.set(r,l);const c=e=>{const{type:t,id:s,progress:d,result:h,error:u,message:p}=e.data;if(s===r)switch(t){case"PROGRESS":n&&n(d,p);break;case"GENERATION_COMPLETE":this.exportGeometryToSTL(i,h.geometry,r,{onProgress:(e,t)=>{n&&n(90+.1*e,t||"Exporting to STL...")}});break;case"EXPORT_COMPLETE":i.removeEventListener("message",c),this.activeJobs.delete(r);const e={...h.stats,totalTime:Date.now()-l.startTime,fileSize:h.data.byteLength||h.data.length};a({stlBuffer:h.data,format:h.format,stats:e});break;case"ERROR":i.removeEventListener("message",c),this.activeJobs.delete(r);const t=u.message||"Unknown worker error";o(new Error(t));break;case"CANCELLED":i.removeEventListener("message",c),this.activeJobs.delete(r),o(new Error("Job was cancelled"))}};i.addEventListener("message",c);const d="card"===e?"GENERATE_CARD":"GENERATE_CYLINDER";i.postMessage({type:d,id:r,data:{brailleLines:t,options:s}})})}async exportGeometryToSTL(e,t,s,n={}){e.postMessage({type:"EXPORT_STL",id:s,data:{geometry:t,format:n.format||"binary"}})}async translateToBraille(e,t="en-us-g1.ctb"){const s=await this.getWorker("liblouis"),n=this.generateJobId();return new Promise((i,r)=>{const a={resolve:i,reject:r,type:"translation",startTime:Date.now()};this.activeJobs.set(n,a);const o=e=>{e.data.result?(s.removeEventListener("message",o),this.activeJobs.delete(n),i(e.data.result)):e.data.error&&(s.removeEventListener("message",o),this.activeJobs.delete(n),r(new Error(`Translation error: ${e.data.error}`)))},l=setTimeout(()=>{s.removeEventListener("message",o),this.activeJobs.delete(n),r(new Error("Translation timeout"))},1e4);s.addEventListener("message",e=>{clearTimeout(l),o(e)}),s.postMessage({text:e,table:t,id:n})})}cancelJob(e){const t=this.activeJobs.get(e);if(t){for(const[t,s]of this.workers)s.postMessage({type:"CANCEL",id:e});this.activeJobs.delete(e),t.reject(new Error("Job cancelled by user"))}}async getStatus(){const e={workers:{},activeJobs:this.activeJobs.size,totalJobs:this.jobCounter};for(const[s,n]of this.workers){const i=this.generateJobId();try{const t=await new Promise((e,t)=>{const s=setTimeout(()=>t(new Error("Status timeout")),2e3),r=t=>{"STATUS"===t.data.type&&t.data.id===i&&(clearTimeout(s),n.removeEventListener("message",r),e(t.data.status))};n.addEventListener("message",r),n.postMessage({type:"GET_STATUS",id:i})});e.workers[s]=t}catch(t){e.workers[s]={error:t.message}}}return e}terminate(){for(const[t,s]of this.activeJobs)s.reject(new Error("WorkerManager terminated"));this.activeJobs.clear();for(const[t,s]of this.workers)try{s.terminate()}catch(e){}this.workers.clear()}generateJobId(){return`job_${++this.jobCounter}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getActiveJobCount(){return this.activeJobs.size}areWorkersReady(){return this.workers.size>0}}class t extends EventTarget{constructor(e){super(),this.container=e,this.workerManager=null,this.currentText="",this.currentBraille="",this.settings={shape_type:"card",card_width:85.6,card_height:53.98,card_thickness:.76,grid_columns:32,grid_rows:4,use_rounded_dots:!1,cylinder_params:{diameter_mm:31.35,height_mm:53.98}},this.init()}init(){this.container.innerHTML='\n      <div class="braille-input-container">\n        <div class="input-header">\n          <h2>📝 Braille Text Input</h2>\n          <p>Enter text to convert to braille and generate 3D models</p>\n        </div>\n\n        <div class="input-section">\n          <div class="text-input-area">\n            <label for="text-input">Text to Convert:</label>\n            <textarea \n              id="text-input" \n              placeholder="Enter your text here (up to 4 lines, ~30 characters per line)&#10;Example: HELLO WORLD"\n              maxlength="500"\n              rows="4"\n            ></textarea>\n            <div class="input-info">\n              <span class="char-count">0/500 characters</span>\n              <button id="translate-btn" class="btn btn-secondary">🔤 Translate to Braille</button>\n            </div>\n          </div>\n\n          <div class="braille-preview-area">\n            <label>Braille Preview:</label>\n            <div id="braille-preview" class="braille-display">\n              <span class="placeholder">Braille characters will appear here...</span>\n            </div>\n            <div class="braille-info">\n              <span id="braille-stats">0 characters, 0 dots</span>\n            </div>\n          </div>\n        </div>\n\n        <div class="settings-section">\n          <h3>⚙️ Generation Settings</h3>\n          \n          <div class="settings-grid">\n            <div class="setting-group">\n              <label>Shape Type:</label>\n              <select id="shape-type">\n                <option value="card">📇 Braille Card</option>\n                <option value="cylinder">🥤 Braille Cylinder</option>\n              </select>\n            </div>\n\n            <div class="setting-group">\n              <label>Card Width (mm):</label>\n              <input type="number" id="card-width" value="85.60" min="10" max="200" step="0.1">\n            </div>\n\n            <div class="setting-group">\n              <label>Card Height (mm):</label>\n              <input type="number" id="card-height" value="53.98" min="10" max="200" step="0.1">\n            </div>\n\n            <div class="setting-group">\n              <label>Thickness (mm):</label>\n              <input type="number" id="card-thickness" value="0.76" min="0.1" max="10" step="0.01">\n            </div>\n\n            <div class="setting-group">\n              <label>Grid Columns:</label>\n              <input type="number" id="grid-columns" value="32" min="5" max="50" step="1">\n            </div>\n\n            <div class="setting-group">\n              <label>Grid Rows:</label>\n              <input type="number" id="grid-rows" value="4" min="1" max="10" step="1">\n            </div>\n\n            <div class="setting-group setting-checkbox">\n              <label>\n                <input type="checkbox" id="use-rounded-dots">\n                <span class="checkmark"></span>\n                Use Rounded Dots\n              </label>\n            </div>\n          </div>\n\n          <div id="cylinder-settings" class="cylinder-settings" style="display: none;">\n            <h4>🥤 Cylinder Settings</h4>\n            <div class="settings-grid">\n              <div class="setting-group">\n                <label>Diameter (mm):</label>\n                <input type="number" id="cylinder-diameter" value="31.35" min="10" max="100" step="0.1">\n              </div>\n              <div class="setting-group">\n                <label>Height (mm):</label>\n                <input type="number" id="cylinder-height" value="53.98" min="10" max="200" step="0.1">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class="action-section">\n          <button id="generate-btn" class="btn btn-primary" disabled>\n            🚀 Generate STL File\n          </button>\n          <div class="action-info">\n            <p>💡 Processing happens entirely in your browser - no server required!</p>\n          </div>\n        </div>\n      </div>\n    ',this.setupEventListeners(),this.updateCharCount(),this.updateGenerateButton()}setupEventListeners(){const e=this.container.querySelector("#text-input"),t=this.container.querySelector("#translate-btn"),s=this.container.querySelector("#generate-btn"),n=this.container.querySelector("#shape-type"),i=this.container.querySelectorAll("input, select");e&&(e.addEventListener("input",e=>{this.currentText=e.target.value,this.updateCharCount(),this.updateGenerateButton()}),e.addEventListener("keydown",e=>{"Enter"===e.key&&e.ctrlKey&&(e.preventDefault(),this.translateToBraille())})),t&&t.addEventListener("click",()=>{this.translateToBraille()}),s&&s.addEventListener("click",()=>{this.startGeneration()}),n&&n.addEventListener("change",e=>{this.settings.shape_type=e.target.value,this.updateCylinderSettings()}),i.forEach(e=>{e.addEventListener("change",()=>{this.updateSettings()})})}updateCharCount(){const e=this.container.querySelector(".char-count");e&&(e.textContent=`${this.currentText.length}/500 characters`,this.currentText.length>400?e.style.color="#e53e3e":this.currentText.length>300?e.style.color="#dd6b20":e.style.color="#4a5568")}updateCylinderSettings(){const e=this.container.querySelector("#cylinder-settings");if(!e)return;const t="card"===this.settings.shape_type;e.style.display=t?"none":"block"}updateSettings(){const e={card_width:"#card-width",card_height:"#card-height",card_thickness:"#card-thickness",grid_columns:"#grid-columns",grid_rows:"#grid-rows",use_rounded_dots:"#use-rounded-dots"};for(const[t,s]of Object.entries(e)){const e=this.container.querySelector(s);e&&("checkbox"===e.type?this.settings[t]=e.checked:this.settings[t]=parseFloat(e.value)||0)}this.settings.cylinder_params={diameter_mm:parseFloat(this.container.querySelector("#cylinder-diameter")?.value)||31.35,height_mm:parseFloat(this.container.querySelector("#cylinder-height")?.value)||53.98}}updateGenerateButton(){const e=this.container.querySelector("#generate-btn");if(!e)return;const t=this.currentText.trim().length>0,s=this.currentBraille.length>0;e.disabled=!t||!s,t&&s?(e.textContent="🚀 Generate STL File",e.className="btn btn-primary"):t&&!s?(e.textContent="🔤 Translate to Braille First",e.className="btn btn-secondary"):(e.textContent="📝 Enter Text Above",e.className="btn btn-disabled")}async translateToBraille(){if(!this.currentText.trim())return void this.showError("Please enter some text to translate");const e=this.container.querySelector("#translate-btn"),t=e?.textContent||"🔤 Translate to Braille";try{e&&(e.textContent="🔄 Translating...",e.disabled=!0),this.currentBraille=this.simpleTextToBraille(this.currentText),this.updateBraillePreview(),this.updateGenerateButton()}catch(s){this.showError("Translation failed: "+s.message)}finally{e&&(e.textContent=t,e.disabled=!1)}}simpleTextToBraille(e){const t={a:"⠁",b:"⠃",c:"⠉",d:"⠙",e:"⠑",f:"⠋",g:"⠛",h:"⠓",i:"⠊",j:"⠚",k:"⠅",l:"⠇",m:"⠍",n:"⠝",o:"⠕",p:"⠏",q:"⠟",r:"⠗",s:"⠎",t:"⠞",u:"⠥",v:"⠧",w:"⠺",x:"⠭",y:"⠽",z:"⠵"," ":"⠀",".":"⠲",",":"⠂","?":"⠦","!":"⠖"};return e.toLowerCase().split("\n").slice(0,4).map(e=>Array.from(e.slice(0,30)).map(e=>t[e]||"⠀").join("")).filter(e=>e.length>0)}updateBraillePreview(){const e=this.container.querySelector("#braille-preview"),t=this.container.querySelector("#braille-stats");if(!e||!t)return;if(0===this.currentBraille.length)return e.innerHTML='<span class="placeholder">Braille characters will appear here...</span>',void(t.textContent="0 characters, 0 dots");const s=this.currentBraille.map((e,t)=>`<div class="braille-line">\n        <span class="line-number">${t+1}:</span>\n        <span class="braille-text">${e}</span>\n        <span class="line-length">(${e.length} chars)</span>\n      </div>`).join("");e.innerHTML=s;const n=this.currentBraille.reduce((e,t)=>e+t.length,0),i=this.currentBraille.reduce((e,t)=>e+Array.from(t).reduce((e,t)=>{const s=t.charCodeAt(0);if(s>=10240&&s<=10495){const t=s-10240;let n=0;for(let e=0;e<6;e++)t&1<<e&&n++;return e+n}return e},0),0);t.textContent=`${n} characters, ${i} dots`}startGeneration(){this.updateSettings(),this.currentBraille&&0!==this.currentBraille.length?this.dispatchEvent(new CustomEvent("generate",{detail:{brailleLines:this.currentBraille,shapeType:this.settings.shape_type,settings:this.settings,originalText:this.currentText}})):this.showError("Please translate text to braille first")}showError(e){const t=this.container.querySelector(".error-message");t&&t.remove();const s=document.createElement("div");s.className="error-message",s.innerHTML=`\n      <span class="error-icon">⚠️</span>\n      <span class="error-text">${e}</span>\n      <button class="error-close">×</button>\n    `,this.container.appendChild(s),setTimeout(()=>{s.parentNode&&s.remove()},5e3),s.querySelector(".error-close").addEventListener("click",()=>{s.remove()})}showSuccess(e){const t=this.container.querySelector(".success-message");t&&t.remove();const s=document.createElement("div");s.className="success-message",s.innerHTML=`\n      <span class="success-icon">✅</span>\n      <span class="success-text">${e}</span>\n    `,this.container.appendChild(s),setTimeout(()=>{s.parentNode&&s.remove()},3e3)}setWorkerManager(e){this.workerManager=e}async translateWithLiblouis(e){if(!this.workerManager)throw new Error("WorkerManager not available");try{const t=await this.workerManager.translateToBraille(e,"en-us-g1.ctb");return t.split("\n").slice(0,4).filter(e=>e.trim().length>0)}catch(t){return this.simpleTextToBraille(e)}}getCurrentInput(){return{originalText:this.currentText,brailleLines:this.currentBraille,settings:{...this.settings}}}loadExample(e="hello"){const t={hello:"HELLO WORLD\nBRAILLE CARD\nGENERATOR\nTEST",alphabet:"ABCDEFGHIJKLM\nNOPQRSTUVWXYZ\n1234567890\n.?!",custom:"CUSTOM TEXT\nFOR TESTING\nBRAILLE STL\nGENERATION"},s=this.container.querySelector("#text-input");s&&(s.value=t[e]||t.hello,this.currentText=s.value,this.updateCharCount(),this.updateGenerateButton(),setTimeout(()=>{this.translateToBraille()},100))}reset(){this.currentText="",this.currentBraille="";const e=this.container.querySelector("#text-input");e&&(e.value=""),this.updateCharCount(),this.updateBraillePreview(),this.updateGenerateButton()}setEnabled(e){this.container.querySelectorAll("input, textarea, select, button").forEach(t=>{t.disabled=!e}),e?this.container.classList.remove("disabled"):this.container.classList.add("disabled")}}class s extends EventTarget{constructor(e){super(),this.container=e,this.currentProgress=0,this.currentMessage="",this.startTime=null,this.isVisible=!1,this.init()}init(){this.container.innerHTML='\n      <div class="progress-bar-wrapper" style="display: none;">\n        <div class="progress-header">\n          <h3>🔄 Processing Braille STL</h3>\n          <button class="cancel-button" title="Cancel generation">\n            <span class="cancel-icon">×</span>\n          </button>\n        </div>\n        \n        <div class="progress-info">\n          <div class="progress-message">Initializing...</div>\n          <div class="progress-details">\n            <span class="progress-percentage">0%</span>\n            <span class="progress-time">--:--</span>\n          </div>\n        </div>\n        \n        <div class="progress-bar">\n          <div class="progress-fill" style="width: 0%;"></div>\n          <div class="progress-stages">\n            <div class="stage" data-stage="translate">🔤</div>\n            <div class="stage" data-stage="generate">🏗️</div>\n            <div class="stage" data-stage="export">📤</div>\n            <div class="stage" data-stage="complete">✅</div>\n          </div>\n        </div>\n        \n        <div class="progress-stats">\n          <div class="stat">\n            <span class="stat-label">Status:</span>\n            <span class="stat-value" id="status-value">Ready</span>\n          </div>\n          <div class="stat">\n            <span class="stat-label">Stage:</span>\n            <span class="stat-value" id="stage-value">Waiting</span>\n          </div>\n          <div class="stat">\n            <span class="stat-label">Estimated:</span>\n            <span class="stat-value" id="estimate-value">--</span>\n          </div>\n        </div>\n      </div>\n    ',this.wrapper=this.container.querySelector(".progress-bar-wrapper"),this.messageElement=this.container.querySelector(".progress-message"),this.percentageElement=this.container.querySelector(".progress-percentage"),this.timeElement=this.container.querySelector(".progress-time"),this.fillElement=this.container.querySelector(".progress-fill"),this.cancelButton=this.container.querySelector(".cancel-button"),this.stagesElement=this.container.querySelector(".progress-stages"),this.statusValue=this.container.querySelector("#status-value"),this.stageValue=this.container.querySelector("#stage-value"),this.estimateValue=this.container.querySelector("#estimate-value"),this.setupEventListeners()}setupEventListeners(){this.cancelButton.addEventListener("click",()=>{this.dispatchEvent(new CustomEvent("cancel"))}),document.addEventListener("keydown",e=>{"Escape"===e.key&&this.isVisible&&this.dispatchEvent(new CustomEvent("cancel"))})}show(e="Starting generation..."){this.isVisible=!0,this.startTime=Date.now(),this.wrapper&&(this.wrapper.style.display="block",this.wrapper.style.opacity="0",setTimeout(()=>{this.wrapper&&(this.wrapper.style.opacity="1")},10)),this.setProgress(0,e),this.updateStage("translate"),this.statusValue&&(this.statusValue.textContent="Running")}hide(){this.isVisible=!1,this.wrapper.style.opacity="0",setTimeout(()=>{this.wrapper.style.display="none"},300)}setProgress(e,t=null){if(this.currentProgress=Math.min(100,Math.max(0,e)),this.currentMessage=t||this.currentMessage,this.percentageElement&&(this.percentageElement.textContent=`${Math.round(this.currentProgress)}%`),this.fillElement&&(this.fillElement.style.width=`${this.currentProgress}%`,this.currentProgress<30?this.fillElement.style.background="linear-gradient(90deg, #4299e1, #3182ce)":this.currentProgress<70?this.fillElement.style.background="linear-gradient(90deg, #ed8936, #dd6b20)":this.fillElement.style.background="linear-gradient(90deg, #48bb78, #38a169)"),t&&this.messageElement&&(this.messageElement.textContent=t),this.startTime&&this.timeElement){const e=Date.now()-this.startTime,t=Math.floor(e/6e4),s=Math.floor(e%6e4/1e3);this.timeElement.textContent=`${t}:${s.toString().padStart(2,"0")}`}if(this.currentProgress>5&&this.startTime&&this.estimateValue){const e=(Date.now()-this.startTime)/this.currentProgress*(100-this.currentProgress),t=Math.floor(e/6e4),s=Math.floor(e%6e4/1e3);this.estimateValue.textContent=e>2e3?`${t}:${s.toString().padStart(2,"0")} remaining`:"Almost done!"}this.updateStageProgress(this.currentProgress)}setMessage(e){this.currentMessage=e,this.messageElement&&(this.messageElement.textContent=e),this.stageValue&&(this.stageValue.textContent=e)}updateStage(e){if(!this.stagesElement)return;this.stagesElement.querySelectorAll(".stage").forEach(e=>e.classList.remove("active","complete"));const t=this.stagesElement.querySelector(`[data-stage="${e}"]`);t&&t.classList.add("active");const s=["translate","generate","export","complete"],n=s.indexOf(e);for(let i=0;i<n;i++){const e=this.stagesElement.querySelector(`[data-stage="${s[i]}"]`);e&&(e.classList.remove("active"),e.classList.add("complete"))}}updateStageProgress(e){e<10?this.updateStage("translate"):e<90?this.updateStage("generate"):e<100?this.updateStage("export"):this.updateStage("complete")}setError(e){this.fillElement&&(this.fillElement.style.background="linear-gradient(90deg, #e53e3e, #c53030)"),this.messageElement&&(this.messageElement.textContent=`Error: ${e.message||e}`),this.statusValue&&(this.statusValue.textContent="Error"),this.estimateValue&&(this.estimateValue.textContent="Failed"),this.wrapper&&this.wrapper.classList.add("error-state")}setComplete(e={}){if(this.setProgress(100,"Generation complete!"),this.updateStage("complete"),this.statusValue&&(this.statusValue.textContent="Complete"),this.estimateValue&&(this.estimateValue.textContent="Done!"),e.fileSize&&this.stageValue){const t=(e.fileSize/1024).toFixed(1);this.stageValue.textContent=`STL ready (${t} KB)`}if(e.processingTime&&this.messageElement){const t=(e.processingTime/1e3).toFixed(1);this.messageElement.textContent=`Complete in ${t}s!`}this.wrapper&&(this.wrapper.classList.add("success-flash"),setTimeout(()=>{this.wrapper&&this.wrapper.classList.remove("success-flash")},1e3))}setCancelled(){this.fillElement&&(this.fillElement.style.background="linear-gradient(90deg, #a0aec0, #718096)"),this.messageElement&&(this.messageElement.textContent="Generation cancelled"),this.statusValue&&(this.statusValue.textContent="Cancelled"),this.estimateValue&&(this.estimateValue.textContent="Stopped")}reset(){this.currentProgress=0,this.currentMessage="",this.startTime=null,this.wrapper.classList.remove("error-state","success-flash"),this.setProgress(0,"Ready"),this.statusValue.textContent="Ready",this.stageValue.textContent="Waiting",this.estimateValue.textContent="--";this.stagesElement.querySelectorAll(".stage").forEach(e=>e.classList.remove("active","complete"))}getState(){return{progress:this.currentProgress,message:this.currentMessage,visible:this.isVisible,startTime:this.startTime,elapsedTime:this.startTime?Date.now()-this.startTime:0}}}class n extends EventTarget{constructor(e){super(),this.container=e,this.scene=null,this.camera=null,this.renderer=null,this.controls=null,this.currentMesh=null,this.currentSTLData=null,this.animationId=null,this.init()}init(){this.container.innerHTML='\n      <div class="stl-viewer-container">\n        <div class="viewer-header">\n          <h2>👁️ 3D Preview</h2>\n          <div class="viewer-controls">\n            <button id="reset-view" class="btn btn-icon" title="Reset View">\n              🔄\n            </button>\n            <button id="wireframe-toggle" class="btn btn-icon" title="Toggle Wireframe">\n              📐\n            </button>\n            <button id="fullscreen-btn" class="btn btn-icon" title="Fullscreen">\n              ⛶\n            </button>\n          </div>\n        </div>\n\n        <div class="viewer-canvas-container">\n          <canvas id="stl-canvas"></canvas>\n          <div class="viewer-overlay" id="viewer-overlay">\n            <div class="overlay-content">\n              <div class="overlay-icon">🎯</div>\n              <h3>Ready for STL Generation</h3>\n              <p>Your 3D model will appear here after generation</p>\n            </div>\n          </div>\n          \n          <div class="viewer-loading" id="viewer-loading" style="display: none;">\n            <div class="loading-spinner"></div>\n            <p>Loading 3D model...</p>\n          </div>\n        </div>\n\n        <div class="viewer-info">\n          <div class="model-stats" id="model-stats" style="display: none;">\n            <div class="stat-item">\n              <span class="stat-label">Vertices:</span>\n              <span class="stat-value" id="vertices-count">--</span>\n            </div>\n            <div class="stat-item">\n              <span class="stat-label">Faces:</span>\n              <span class="stat-value" id="faces-count">--</span>\n            </div>\n            <div class="stat-item">\n              <span class="stat-label">File Size:</span>\n              <span class="stat-value" id="file-size">--</span>\n            </div>\n          </div>\n          \n          <div class="viewer-actions" id="viewer-actions" style="display: none;">\n            <button id="download-btn" class="btn btn-success">\n              💾 Download STL\n            </button>\n            <button id="download-ascii-btn" class="btn btn-secondary">\n              📄 Download ASCII\n            </button>\n            <button id="new-generation-btn" class="btn btn-primary">\n              🔄 Generate New\n            </button>\n          </div>\n        </div>\n\n        <div class="viewer-help">\n          <div class="help-item">\n            <span class="help-icon">🖱️</span>\n            <span class="help-text">Left click + drag to rotate</span>\n          </div>\n          <div class="help-item">\n            <span class="help-icon">🔍</span>\n            <span class="help-text">Scroll to zoom in/out</span>\n          </div>\n          <div class="help-item">\n            <span class="help-icon">✋</span>\n            <span class="help-text">Right click + drag to pan</span>\n          </div>\n        </div>\n      </div>\n    ',this.canvas=this.container.querySelector("#stl-canvas"),this.overlay=this.container.querySelector("#viewer-overlay"),this.loading=this.container.querySelector("#viewer-loading"),this.modelStats=this.container.querySelector("#model-stats"),this.viewerActions=this.container.querySelector("#viewer-actions"),this.setupEventListeners(),this.setupThreeJS()}setupEventListeners(){const e=this.container.querySelector("#reset-view"),t=this.container.querySelector("#wireframe-toggle"),s=this.container.querySelector("#fullscreen-btn"),n=this.container.querySelector("#download-btn"),i=this.container.querySelector("#download-ascii-btn"),r=this.container.querySelector("#new-generation-btn");e&&e.addEventListener("click",()=>{this.resetView()}),t&&t.addEventListener("click",()=>{this.toggleWireframe()}),s&&s.addEventListener("click",()=>{this.toggleFullscreen()}),n&&n.addEventListener("click",()=>{this.downloadSTL("binary")}),i&&i.addEventListener("click",()=>{this.downloadSTL("ascii")}),r&&r.addEventListener("click",()=>{this.dispatchEvent(new CustomEvent("new-generation"))}),window.addEventListener("resize",()=>{this.handleResize()})}async setupThreeJS(){try{this.mockThreeJSSetup()}catch(e){this.showError("Failed to initialize 3D viewer")}}mockThreeJSSetup(){this.canvas.width=this.canvas.offsetWidth||400,this.canvas.height=this.canvas.offsetHeight||300;const e=this.canvas.getContext("2d");e&&(e.fillStyle="#f7fafc",e.fillRect(0,0,this.canvas.width,this.canvas.height),e.fillStyle="#4a5568",e.font="16px Arial",e.textAlign="center",e.fillText("3D Preview Ready",this.canvas.width/2,this.canvas.height/2))}async loadSTL(e,t={}){this.currentSTLData=e;try{this.showLoading(!0),this.hideOverlay(),await new Promise(e=>setTimeout(e,500)),await this.mockLoadSTL(e,t),this.updateModelStats(t),this.showViewerActions(!0),this.showLoading(!1)}catch(s){this.showError("Failed to load STL model"),this.showLoading(!1)}}async mockLoadSTL(e,t){const s=this.canvas.getContext("2d");if(s){s.fillStyle="#1a202c",s.fillRect(0,0,this.canvas.width,this.canvas.height);const e=this.canvas.width/2,n=this.canvas.height/2;if(s.strokeStyle="#4299e1",s.lineWidth=2,"cylinder"===t.shapeType)s.beginPath(),s.ellipse(e,n-20,40,15,0,0,2*Math.PI),s.stroke(),s.beginPath(),s.ellipse(e,n+20,40,15,0,0,2*Math.PI),s.stroke(),s.beginPath(),s.moveTo(e-40,n-20),s.lineTo(e-40,n+20),s.moveTo(e+40,n-20),s.lineTo(e+40,n+20),s.stroke();else{s.strokeRect(e-60,n-30,120,60),s.fillStyle="#4299e1";for(let t=0;t<6;t++)for(let i=0;i<3;i++){const r=e-40+15*t,a=n-15+15*i;s.beginPath(),s.arc(r,a,2,0,2*Math.PI),s.fill()}}s.fillStyle="#e2e8f0",s.font="14px Arial",s.textAlign="center",s.fillText("Braille Model Preview",e,30),s.fillText(`${t.vertices||0} vertices, ${t.faces||0} faces`,e,this.canvas.height-20)}}updateModelStats(e){this.container.querySelector("#vertices-count").textContent=e.vertices?e.vertices.toLocaleString():"--",this.container.querySelector("#faces-count").textContent=e.faces?e.faces.toLocaleString():"--",this.container.querySelector("#file-size").textContent=e.fileSize?this.formatFileSize(e.fileSize):"--",this.modelStats.style.display="flex"}formatFileSize(e){if(0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB"][t]}showLoading(e){this.loading.style.display=e?"flex":"none"}hideOverlay(){this.overlay.style.display="none"}showViewerActions(e){this.viewerActions.style.display=e?"flex":"none"}resetView(){this.currentSTLData&&this.mockLoadSTL(this.currentSTLData,{})}toggleWireframe(){this.container.querySelector("#wireframe-toggle").classList.toggle("active")}toggleFullscreen(){document.fullscreenElement?document.exitFullscreen?.():this.container.requestFullscreen?.()}downloadSTL(e="binary"){if(this.currentSTLData)try{let t,s;"binary"===e?(t=new Blob([this.currentSTLData],{type:"application/octet-stream"}),s=`braille_model_${Date.now()}.stl`):(t=new Blob([this.currentSTLData],{type:"text/plain"}),s=`braille_model_${Date.now()}_ascii.stl`);const n=URL.createObjectURL(t),i=document.createElement("a");i.href=n,i.download=s,i.style.display="none",document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(n),this.dispatchEvent(new CustomEvent("download",{detail:{format:e,filename:s,size:t.size}}))}catch(t){this.showError("Download failed: "+t.message)}else this.showError("No STL data available for download")}showError(e){const t=this.container.querySelector(".viewer-error");t&&t.remove();const s=document.createElement("div");s.className="viewer-error",s.innerHTML=`\n      <div class="error-content">\n        <span class="error-icon">⚠️</span>\n        <span class="error-text">${e}</span>\n        <button class="error-close">×</button>\n      </div>\n    `,this.container.appendChild(s),setTimeout(()=>{s.parentNode&&s.remove()},5e3),s.querySelector(".error-close").addEventListener("click",()=>{s.remove()})}clear(){this.currentMesh=null,this.currentSTLData=null,this.overlay.style.display="flex",this.modelStats.style.display="none",this.viewerActions.style.display="none";const e=this.canvas.getContext("2d");e&&(e.fillStyle="#f7fafc",e.fillRect(0,0,this.canvas.width,this.canvas.height))}handleResize(){if(!this.canvas)return;const e=this.container.getBoundingClientRect();this.canvas.width=e.width-40,this.canvas.height=Math.max(300,e.height-100),this.currentSTLData?this.mockLoadSTL(this.currentSTLData,{}):this.mockThreeJSSetup()}mockThreeJSSetup(){const e=this.canvas.getContext("2d");e&&(e.fillStyle="#f7fafc",e.fillRect(0,0,this.canvas.width,this.canvas.height))}getState(){return{hasModel:!!this.currentSTLData,modelLoaded:!!this.currentMesh,canvasSize:{width:this.canvas.width,height:this.canvas.height},currentSTLSize:this.currentSTLData?this.currentSTLData.byteLength:0}}setLoading(e,t="Loading..."){if(this.showLoading(e),e){const e=this.loading.querySelector("p");e&&(e.textContent=t)}}showSuccess(e){const t=document.createElement("div");t.className="viewer-success",t.innerHTML=`\n      <div class="success-content">\n        <span class="success-icon">✅</span>\n        <span class="success-text">${e}</span>\n      </div>\n    `,this.container.appendChild(t),setTimeout(()=>{t.parentNode&&t.remove()},3e3)}destroy(){this.animationId&&cancelAnimationFrame(this.animationId),this.currentMesh=null,this.currentSTLData=null}}class i{constructor(t){this.container=t,this.workerManager=new e,this.brailleInput=null,this.progressBar=null,this.stlViewer=null,this.currentJob=null,this.currentSTLData=null,this.init()}async init(){this.container.innerHTML='\n      <div class="app-container">\n        <header class="app-header">\n          <h1>🔤 Braille Card & Cylinder STL Generator</h1>\n          <p class="subtitle">Client-side processing powered by Cloudflare Pages</p>\n          <div class="header-status">\n            <span class="status-indicator">🌐</span>\n            <span class="status-text">Phase 7: Cloudflare Pages Deployment Ready</span>\n          </div>\n        </header>\n        \n        <main class="app-main">\n          <div class="main-grid">\n            \x3c!-- Input Section --\x3e\n            <section class="input-section">\n              <div id="braille-input" class="component-container"></div>\n            </section>\n            \n            \x3c!-- Preview Section --\x3e\n            <section class="preview-section">\n              <div id="stl-viewer" class="component-container"></div>\n            </section>\n          </div>\n          \n          \x3c!-- Progress Section --\x3e\n          <section class="progress-section">\n            <div id="progress-container" class="component-container"></div>\n          </section>\n        </main>\n        \n        <footer class="app-footer">\n          <div class="footer-content">\n            <div class="footer-info">\n              <p>🌐 Processing happens entirely in your browser - no server required!</p>\n              <p class="version">v2.0.0 - Cloudflare Pages Edition</p>\n            </div>\n            <div class="footer-actions">\n              <button id="demo-btn" class="btn btn-outline">🎯 Load Demo</button>\n              <button id="reset-btn" class="btn btn-outline">🔄 Reset</button>\n            </div>\n          </div>\n        </footer>\n      </div>\n    ',await this.initializeComponents(),this.setupEventHandlers(),this.showWelcomeMessage()}async initializeComponents(){try{this.brailleInput=new t(this.container.querySelector("#braille-input")),this.brailleInput.setWorkerManager(this.workerManager),this.stlViewer=new n(this.container.querySelector("#stl-viewer")),this.progressBar=new s(this.container.querySelector("#progress-container"))}catch(e){this.showError("Failed to initialize components: "+e.message)}}setupEventHandlers(){this.brailleInput.addEventListener("generate",async e=>{await this.generateSTL(e.detail)}),this.stlViewer.addEventListener("download",e=>{this.handleDownload(e.detail)}),this.stlViewer.addEventListener("new-generation",()=>{this.startNewGeneration()}),this.progressBar.addEventListener("cancel",()=>{this.cancelGeneration()}),this.container.querySelector("#demo-btn").addEventListener("click",()=>{this.loadDemo()}),this.container.querySelector("#reset-btn").addEventListener("click",()=>{this.resetApplication()}),document.addEventListener("keydown",e=>{if(e.ctrlKey||e.metaKey)switch(e.key){case"Enter":e.preventDefault(),this.brailleInput&&this.brailleInput.translateToBraille();break;case"g":if(e.preventDefault(),!this.progressBar.isVisible){const e=this.brailleInput.getCurrentInput();e.brailleLines.length>0&&this.generateSTL(e)}}})}async generateSTL(e){const{brailleLines:t,shapeType:s,settings:n,originalText:i}=e;try{this.setUIEnabled(!1),this.progressBar.show("Starting generation..."),this.stlViewer.clear();const e=await this.workerManager.generateSTL(s,t,n,(e,t)=>{this.progressBar.setProgress(e,t)});this.progressBar.setComplete(e.stats),await this.stlViewer.loadSTL(e.stlBuffer,{...e.stats,shapeType:s,originalText:i}),this.currentSTLData=e.stlBuffer,this.showSuccessMessage(`STL generated successfully! ${this.formatFileSize(e.stats.fileSize)}`),setTimeout(()=>{this.progressBar.hide()},2e3)}catch(r){this.progressBar.setError(r),this.showError("Generation failed: "+r.message),setTimeout(()=>{this.progressBar.hide()},3e3)}finally{this.setUIEnabled(!0)}}handleDownload(e){this.showSuccessMessage(`Download started: ${e.filename}`)}cancelGeneration(){this.currentJob&&(this.workerManager.cancelJob(this.currentJob),this.progressBar.setCancelled(),setTimeout(()=>{this.progressBar.hide(),this.setUIEnabled(!0)},1e3))}startNewGeneration(){this.stlViewer.clear(),this.progressBar.reset(),this.currentSTLData=null}loadDemo(){this.brailleInput.loadExample("hello"),this.showSuccessMessage('Demo text loaded! Click "Translate to Braille" then "Generate STL"')}resetApplication(){this.brailleInput.reset(),this.stlViewer.clear(),this.progressBar.reset(),this.currentSTLData=null,this.currentJob=null,this.showSuccessMessage("Application reset successfully")}setUIEnabled(e){this.brailleInput.setEnabled(e);this.container.querySelectorAll(".footer-actions button").forEach(t=>{t.disabled=!e})}showWelcomeMessage(){setTimeout(()=>{this.showSuccessMessage('🎉 Welcome! Enter text above and click "Load Demo" to get started.')},500)}showError(e){const t=document.createElement("div");t.className="app-notification error",t.innerHTML=`\n      <div class="notification-content">\n        <span class="notification-icon">⚠️</span>\n        <span class="notification-text">${e}</span>\n        <button class="notification-close">×</button>\n      </div>\n    `,this.container.appendChild(t),setTimeout(()=>{t.parentNode&&t.remove()},5e3),t.querySelector(".notification-close").addEventListener("click",()=>{t.remove()})}showSuccessMessage(e){const t=document.createElement("div");t.className="app-notification success",t.innerHTML=`\n      <div class="notification-content">\n        <span class="notification-icon">✅</span>\n        <span class="notification-text">${e}</span>\n      </div>\n    `,this.container.appendChild(t),setTimeout(()=>{t.parentNode&&t.remove()},3e3)}formatFileSize(e){if(0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB"][t]}getState(){return{inputState:this.brailleInput?.getCurrentInput(),progressState:this.progressBar?.getState(),viewerState:this.stlViewer?.getState(),hasSTLData:!!this.currentSTLData,workersReady:this.workerManager?.areWorkersReady()}}destroy(){this.workerManager&&this.workerManager.terminate(),this.stlViewer&&this.stlViewer.destroy()}}document.addEventListener("DOMContentLoaded",()=>{try{(function(){const e={webgl:!!document.createElement("canvas").getContext("webgl2"),workers:"undefined"!=typeof Worker,wasm:"undefined"!=typeof WebAssembly,indexedDB:"indexedDB"in window,serviceWorker:"serviceWorker"in navigator,sharedArrayBuffer:"undefined"!=typeof SharedArrayBuffer,offscreenCanvas:"undefined"!=typeof OffscreenCanvas},t=["webgl","workers","wasm"].filter(t=>!e[t]);if(t.length>0)throw new Error(`Your browser is missing required features: ${t.join(", ")}. Please use a modern browser like Chrome, Firefox, or Edge.`)})()}catch(n){return e=n.message,void(document.body.innerHTML=`\n    <div style="\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n      padding: 2rem;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      text-align: center;\n      background: #f5f5f5;\n    ">\n      <div style="\n        background: white;\n        padding: 2rem;\n        border-radius: 12px;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n        max-width: 600px;\n      ">\n        <h1 style="color: #e53e3e; margin-bottom: 1rem;">⚠️ Browser Compatibility Issue</h1>\n        <p style="color: #4a5568; line-height: 1.6; margin-bottom: 1.5rem;">${e}</p>\n        <p style="color: #718096; font-size: 0.9rem;">\n          This application requires modern browser features for 3D processing and web workers.\n        </p>\n      </div>\n    </div>\n  `)}var e;const t=document.getElementById("app");if(!t)throw new Error("App container not found");const s=new i(t);window.addEventListener("beforeunload",()=>{s.destroy()})});
